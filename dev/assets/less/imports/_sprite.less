/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@bag-big-name: 'bag-big';
@bag-big-x: 339px;
@bag-big-y: 143px;
@bag-big-offset-x: -339px;
@bag-big-offset-y: -143px;
@bag-big-width: 127px;
@bag-big-height: 130px;
@bag-big-total-width: 472px;
@bag-big-total-height: 294px;
@bag-big-image: '../img/sprite.png';
@bag-big: 339px 143px -339px -143px 127px 130px 472px 294px '../img/sprite.png' 'bag-big';
@handbag-big-name: 'handbag-big';
@handbag-big-x: 0px;
@handbag-big-y: 166px;
@handbag-big-offset-x: 0px;
@handbag-big-offset-y: -166px;
@handbag-big-width: 150px;
@handbag-big-height: 128px;
@handbag-big-total-width: 472px;
@handbag-big-total-height: 294px;
@handbag-big-image: '../img/sprite.png';
@handbag-big: 0px 166px 0px -166px 150px 128px 472px 294px '../img/sprite.png' 'handbag-big';
@phone-name: 'phone';
@phone-x: 166px;
@phone-y: 128px;
@phone-offset-x: -166px;
@phone-offset-y: -128px;
@phone-width: 13px;
@phone-height: 12px;
@phone-total-width: 472px;
@phone-total-height: 294px;
@phone-image: '../img/sprite.png';
@phone: 166px 128px -166px -128px 13px 12px 472px 294px '../img/sprite.png' 'phone';
@phonegirl-big-name: 'phonegirl-big';
@phonegirl-big-x: 339px;
@phonegirl-big-y: 0px;
@phonegirl-big-offset-x: -339px;
@phonegirl-big-offset-y: 0px;
@phonegirl-big-width: 133px;
@phonegirl-big-height: 133px;
@phonegirl-big-total-width: 472px;
@phonegirl-big-total-height: 294px;
@phonegirl-big-image: '../img/sprite.png';
@phonegirl-big: 339px 0px -339px 0px 133px 133px 472px 294px '../img/sprite.png' 'phonegirl-big';
@shahter-big-name: 'shahter-big';
@shahter-big-x: 0px;
@shahter-big-y: 0px;
@shahter-big-offset-x: 0px;
@shahter-big-offset-y: 0px;
@shahter-big-width: 156px;
@shahter-big-height: 156px;
@shahter-big-total-width: 472px;
@shahter-big-total-height: 294px;
@shahter-big-image: '../img/sprite.png';
@shahter-big: 0px 0px 0px 0px 156px 156px 472px 294px '../img/sprite.png' 'shahter-big';
@twohand-big-name: 'twohand-big';
@twohand-big-x: 166px;
@twohand-big-y: 0px;
@twohand-big-offset-x: -166px;
@twohand-big-offset-y: 0px;
@twohand-big-width: 163px;
@twohand-big-height: 118px;
@twohand-big-total-width: 472px;
@twohand-big-total-height: 294px;
@twohand-big-image: '../img/sprite.png';
@twohand-big: 166px 0px -166px 0px 163px 118px 472px 294px '../img/sprite.png' 'twohand-big';
@spritesheet-width: 472px;
@spritesheet-height: 294px;
@spritesheet-image: '../img/sprite.png';
@spritesheet-sprites: @bag-big @handbag-big @phone @phonegirl-big @shahter-big @twohand-big;
@spritesheet: 472px 294px '../img/sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
